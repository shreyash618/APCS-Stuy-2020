Lab-01.txt
Shreya Shukla

1. There are 26 characters in the alphabet we use for writing English.
   what is the least number of bits needed to give each character a
   unique bit pattern? How many bits would we need to distinguish
   between upper and lowercase versions of all 26 characters? 

   5 bits for alphabet, 6 for distinguishing upper and lower

   Since the number of bits determines how many combinations we can come up with (ie. i bits would yield 2^i combinations in binary code), we have to use i number of bits such that 2^i is the smallest value greater than 26. 2^5 is 32, which is greater than 26, thus, we can sufficiently come up with 26 combinations for our alphabet by using a 5 bit system. To include separate combinations for upper and lowercase letters, we would need 42 combinations. 2^6 is 64, which is greater than 42, so, we use 6 bits.


2. a. What is the largest positive number one can represent in an
      8-bit 2's complement code? Write your result in binary and
      decimal.
      01111111 is the largest (positive) integer one can represent using 2'c complement code. This is because we want to have as many 1s as possible to get the greatest possible number, but at the same time we cannot use 1 for the sign bit as that would make the number negative.
      0111 1111 -> 2^6 +2^5+ 2^4 + 2^3+ 2^2 + 2^1 +2^0 = 64+ 32+ 16 +8 +4 +2 + 1 = 127. In decimal, this would be 127.

   b. What is the greatest magnitude negative number one can represent
      in an 8-bit 2's complement code? Write your result in binary
      and decimal.
      10000000, or -128 is the greatest magnititude negative number one can represent in a 8-bit 2's complement code. You can get this by inverting the largest positive integer, 01111111, to 10000000, which is really -(1000000), or -(2^7) aka -128.

   c. What is the largest positive number one can represent in n-bit
      2's complement code? 
      (2^(n-1))-1 is the largest postive number that can be represented with any n-bit 2's complement code.

   d. What is the greatest magnitude negative one can represent in
      n-bit 2's complement code?
      -(2^(n-1)) is the greatest magnitude negative that can be represented in
      n-bit 2's complement code.


3. Convert the following 2's complement binary numbers to decimal.

   a. 1010 => -(0101 + 1) => -(0110) => -(6)
   b. 01011010 => 2 + 8 + 16 + 64 => 90
   c. 11111110 => 2 + 4 + 8 + 16 + 32 + 64 - 128 = 126 -128 -2
   d. 0011100111010011 => 14,803

4. Convert these decimal numbers to 8-bit 2's complement binary numbers.

   a. 102 => 01100101
   b. 64 => 01000000
   c. 33 => 00100001
   d. -128 => 10000000
   e. 127 => 011111


5. Add the following 4-bit patterns. Leave your results in binary form.

   a. 1011 + 0001 = 1100 => 4 + 8 = 12 
   b. 0000 + 1010 = 1010 => 2 + 8 = 10
   c. 1100 + 0011 = 1111 => 1 + 2 + 4 + 8 = 15
   d. 0101 + 0110 = 1011 =>  1 + 2 + 8 = 11
   e. 1111 + 0001 = 0000 => 0 [or it is it 10000? wouldn't the 1 carrying over would make it 5 bit code not a 4 bit code? but in that case the answer would be 16]